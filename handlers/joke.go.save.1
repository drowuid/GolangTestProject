					package handlers

import (

"encoding/json"
"math/rand"
"net/http"
"time"
"strconv"
"strings"
"time"
)

type Joke struct {
ID int `json:"id"`
Setup string `json:"setup"`
Punchline string `json:"punchline"`

}



jokes := []Joke{

        {ID: 1, Setup: "Why don't scientists trust atoms?", Punchline: "Because they make up everything!"},
        {ID: 2, Setup: "How does a penguin build its house?", Punchline: "Igloos it together."},
        {ID: 3, Setup: "Why did the computer go to therapy?", Punchline: "It had too many processing issues."},
        {ID: 4, Setup: "What do you call fake spaghetti?", Punchline: "An impasta."},
        {ID: 5, Setup: "Why was the math book sad?", Punchline: "It had too many problems."},
}


func JokeHandler(w http.ResponseWriter, r *http.Request) {
w.Heaader().Set("Content-Type", "application/json")

if r.Method == http.MethodPost {
var newJoke Joke
err := json.NewDecoder(r.Body).Decode(&newJoke)
if err != nil {
http.Error(w, "Invalid JSON", http.StatusBadRequest)
return
}

newJoke.ID = len(jokes) + 1
jokes = append(jokes, newJoke)
json.NewEncoder(w).Encode(newJoke)
return
}

rand.Seed(time.Now().UnixNano())
joke := jokes[rand.Intn(len(jokes))]
json.NewEncoder(w).Encode(joke)
}

func JokeByIDHandler(w http.ResponseWriter, r *http.Request) {
w.Header().Set("Content-Type", "application/json")

parts := strings.Split(r.URL.Path, "/")
if len(parts) < 4 {
http.Error(w, "Missing joke ID", http.StatusBadRequest)
return
}

idStr := parts[3]
id, err := strconv.Atoi(idStr)
if err != nil {
http.Error(w, "Invalid joke ID", http.StatusBadRequest)
return
}

for _, joke := range jokes {
if joke.ID == id {
json.NewEncoder(w).Encode(joke)
return
}
}

http.Error(w, "Joke not found", http.StatusNotFound)
}
